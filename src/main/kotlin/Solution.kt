/** n = 1 snail[0] = 1
 * n = 2
 * snail[0] = 1
 * snail[1] = 2,3
 *
 * n = 3
 * snail[0] = 1
 * snail[1] = 2,6
 * snail[2] = 3,4,5
 *
 * n = 4
 *      1           snail[0] = 1
 *     2 9          snail[1] = 2, 9
 *    3 10 8        snail[2] = 3,10, 8
 *   4 5  6 7       snail[3] = 4, 5, 6, 7
 * n = 5
 *      1          snail[0] = 1
 *     2 12        snail[1] = 2,12
 *    3 13 11      snail[2] = 3,13,11
 *   4 14 15 10    snail[3] = 4,14,15,10
 *  5 6  7  8  9   snail[4] = 5, 6, 7, 8, 9
 *
 * n = 6
 * 1
 * 2 15
 * 3 16 14
 * 4 17 21 13
 * 5 18 19 20 12
 * 6 7  8  9  10 11
 *
 * n = 7
 * 1
 * 2 18
 * 3 19 17
 * 4 20 27 16
 * 5 21 28 26 15
 * 6 22 23 24 25 14
 * 7 8  9  10 11 12 13
 *
 *  1.  각 층이 존재
 *  2. 외각(?) 이 비어있음 채워줌
 *  3. 값을 넣을때는 비어있지 않은 첫번째 부분이나 마지막부분
 *
 *  재활용되는 값이 없으므로 dps 는 적절하지않다 -> 재귀적으로 고려하지말자?
 *  층 마다 n의크기에 따라 값이 다르기떄문에
 *  Class 형태로 해서 구현해볼까..????????
 *  class Snail(size:Int)
 *  - values = IntArray(size,{0})
 *  - type = 값을 넣는 형태를 지정
 *
 * //기능
 *  push() : 제약조건에 따라 값을 넣는다.
 *
 *
 *  1. n의크기만큼 배열을 생성
 *  2. 생성하고 순차적으로 값을 넣는
 *      - 외각부터 채우는 형식
 *   (1,1) (2,3) (3,6) (4,10) (5,15) (6,21) (7,28)
 *   피보나치.... 재귀적 ??
 *   n = 4 일때 길이가 1인 삼각형과 길이가 4인 삼각형
 *   n = 5 일때 길이가 2인 삼각형과 길이가 5인 삼각형
 *   n = 6 일때 길이가 3인 삼각형과 길이가 6인 삼각형
 *
 *
 *  채우는 행위
 *  a. 위에서 내려오면서 값을 넣는다
 *  b. 좌->우로 값을 넣는다
 *  c. 아래서부터 위까지 값을 넣는다
 *  이때, 해당 배열의 좌표?를 계산해서 처리한다?
 *      - 외부 채워진 수를 점진적으로 증가
 *  이 행위를 계속 반복하여 해당 목표지점까지 도달하면 1차원으로 mapping 해서 리턴한다.
 */


class Solution {
    fun solution(n: Int): IntArray {
        var answer: IntArray = intArrayOf()

        //1. 배열생성
        var snail = mutableListOf<IntArray>()
        for(idx in 0..n-1){
            val listValues = mutableListOf<Int>()
            for(i in 0..idx) listValues.add(0)
            snail.add(listValues.toIntArray())
        }

        //2. 값넣기


        return answer
    }
}
fun main(){
    val s = Solution()
    s.solution(4)//[1,2,9,3,10,8,4,5,6,7]
    s.solution(5)//[1,2,12,3,13,11,4,14,15,10,5,6,7,8,9]
    s.solution(6)//[1,2,15,3,16,14,4,17,21,13,5,18,19,20,12,6,7,8,9,10,11]
}